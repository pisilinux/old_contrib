diff -rupN conky-1.8.1/configure.ac conky-1.8.1.new/configure.ac
--- conky-1.8.1/configure.ac	2010-10-05 23:27:06.000000000 +0100
+++ conky-1.8.1.new/configure.ac	2011-01-30 17:27:38.580000130 +0000
@@ -190,6 +190,23 @@ fi
 
 
 dnl
+dnl Clementine
+dnl
+
+AC_ARG_ENABLE([clementine],
+	                    AC_HELP_STRING([--enable-clementine], [enable if you want Clementine support @<:@default=no@:>@]),
+			                  [want_clementine="$enableval"], [want_clementine=no])
+
+AM_CONDITIONAL(BUILD_CLEMENTINE, test x$want_clementine = xyes)
+if test x$want_clementine = xyes; then
+  PKG_CHECK_MODULES([CLEMENTINE], [dbus-glib-1])
+  conky_CFLAGS="$conky_CFLAGS $CLEMENTINE_CFLAGS"
+  conky_LIBS="$conky_LIBS $CLEMENTINE_LIBS"
+  AC_DEFINE(CLEMENTINE, 1, [Define if you want Clementine support])
+fi
+
+
+dnl
 dnl Support for IBM/Lenovo notebooks
 dnl
 
@@ -985,6 +1002,7 @@ $PACKAGE $VERSION configured successfull
  * Music detection:
   Audacious:        $want_audacious
   BMPx:             $want_bmpx
+  Clementine:	    $want_clementine
   MPD:              $want_mpd
   MOC:              $want_moc
   XMMS2:            $want_xmms2
diff -rupN conky-1.8.1/configure.ac.in conky-1.8.1.new/configure.ac.in
--- conky-1.8.1/configure.ac.in	2010-10-05 23:17:08.000000000 +0100
+++ conky-1.8.1.new/configure.ac.in	2011-01-30 17:27:28.543333462 +0000
@@ -190,6 +190,23 @@ fi
 
 
 dnl
+dnl Clementine
+dnl
+
+AC_ARG_ENABLE([clementine],
+	                    AC_HELP_STRING([--enable-clementine], [enable if you want Clementine support @<:@default=no@:>@]),
+			                  [want_clementine="$enableval"], [want_clementine=no])
+
+AM_CONDITIONAL(BUILD_CLEMENTINE, test x$want_clementine = xyes)
+if test x$want_clementine = xyes; then
+  PKG_CHECK_MODULES([CLEMENTINE], [dbus-glib-1])
+  conky_CFLAGS="$conky_CFLAGS $CLEMENTINE_CFLAGS"
+  conky_LIBS="$conky_LIBS $CLEMENTINE_LIBS"
+  AC_DEFINE(CLEMENTINE, 1, [Define if you want Clementine support])
+fi
+
+
+dnl
 dnl Support for IBM/Lenovo notebooks
 dnl
 
@@ -985,6 +1002,7 @@ $PACKAGE $VERSION configured successfull
  * Music detection:
   Audacious:        $want_audacious
   BMPx:             $want_bmpx
+  Clementine:	    $want_clementine
   MPD:              $want_mpd
   MOC:              $want_moc
   XMMS2:            $want_xmms2
diff -rupN conky-1.8.1/src/clementine.c conky-1.8.1.new/src/clementine.c
--- conky-1.8.1/src/clementine.c	1970-01-01 01:00:00.000000000 +0100
+++ conky-1.8.1.new/src/clementine.c	2011-01-31 12:31:25.536666675 +0000
@@ -0,0 +1,380 @@
+/* -*- mode: c; c-basic-offset: 4; tab-width: 4; indent-tabs-mode: t -*-
+ * vim: ts=4 sw=4 noet ai cindent syntax=c
+ *
+ * clementine.c:  conky support for clementine music player
+ *
+ * Copyright (C) 2011 David Buchan bluebucket@bluebucket.org
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301
+ * USA.
+ *
+ */
+
+#include "config.h"
+#include "conky.h"
+#include "logging.h"
+#include "clementine.h"
+
+#include <glib.h>
+#include <glib-object.h>
+#include <dbus/dbus-glib.h>
+
+/* access to this item array is synchronized */
+static clementine_t clementine_items;
+
+/* -----------------------------------------
+ * Conky update function for clementine data.
+ * ----------------------------------------- */
+int update_clementine(void)
+{
+	/* The worker thread is updating clementine_items array asynchronously
+	 * to the main conky thread.
+	 * We merely copy the clementine_items array into the main thread's info
+	 * structure when the main thread's update cycle fires. */
+	if (!info.clementine.p_timed_thread) {
+		if (create_clementine_thread() != 0) {
+			CRIT_ERR(NULL, NULL, "unable to create clementine thread!");
+		}
+		timed_thread_register(info.clementine.p_timed_thread,
+			&info.clementine.p_timed_thread);
+	}
+
+	timed_thread_lock(info.clementine.p_timed_thread);
+	memcpy(&info.clementine.items, clementine_items, sizeof(clementine_items));
+	timed_thread_unlock(info.clementine.p_timed_thread);
+	return 0;
+}
+
+/* ---------------------------------------------------------
+ * Create a worker thread for clementine media player status.
+ *
+ * Returns 0 on success, -1 on error.
+ * --------------------------------------------------------- */
+int create_clementine_thread(void)
+{
+	if (!info.clementine.p_timed_thread) {
+		info.clementine.p_timed_thread =
+			timed_thread_create(clementine_thread_func, NULL,
+			info.music_player_interval * 1000000);
+	}
+
+	if (!info.clementine.p_timed_thread
+			|| timed_thread_run(info.clementine.p_timed_thread)) {
+		return -1;
+	}
+
+	return 0;
+}
+
+/* ---------------------------------------
+ * Destroy clementine player status thread.
+ *
+ * Returns 0 on success, -1 on error.
+ * --------------------------------------- */
+int destroy_clementine_thread(void)
+{
+	/* Is a worker is thread running? If not, no error. */
+	if (info.clementine.p_timed_thread) {
+		timed_thread_destroy(info.clementine.p_timed_thread,
+			&info.clementine.p_timed_thread);
+	}
+
+	return 0;
+}
+
+/* ---------------------------------------------------
+ * Worker thread function for clementine data sampling.
+ * --------------------------------------------------- */
+__attribute((noreturn))
+void *clementine_thread_func(void *pvoid)
+{
+	static clementine_t items;
+	GHashTable *metadata;
+	gint pos, vol, playlistlength, playlistpos;
+	gchar *palbumart;
+	
+	DBusGProxy *playersession = NULL;
+	DBusGProxy *tracklistsession = NULL;
+	DBusGConnection *connection = NULL;
+	GError *error = NULL;
+	
+	pvoid = (void *) pvoid;	/* avoid warning */
+	playersession = 0;
+	tracklistsession = 0;
+	metadata = NULL;
+	
+	g_type_init();
+	dbus_g_type_specialized_init();
+	
+	connection = dbus_g_bus_get(DBUS_BUS_SESSION, NULL);
+	if (!connection) {
+		CRIT_ERR(NULL, NULL, "Unable to establish dbus connection for Clementine.");
+	}
+	
+	playersession = dbus_g_proxy_new_for_name(connection, CLEMENTINE_DBUS_SERVICE,
+			CLEMENTINE_DBUS_PATH_PLAYER, CLEMENTINE_DBUS_INTERFACE);
+	if (!playersession) {
+		CRIT_ERR(NULL, NULL, "Unable to create Clementine Player dbus proxy");
+	}
+	
+	tracklistsession = dbus_g_proxy_new_for_name(connection, CLEMENTINE_DBUS_SERVICE,
+			CLEMENTINE_DBUS_PATH_TRACKLIST, CLEMENTINE_DBUS_INTERFACE);
+	if (!tracklistsession) {
+		CRIT_ERR(NULL, NULL, "Unable to create Clementine Track List dbus proxy");
+	}
+
+	/* Loop until the main thread resets the runnable signal. */
+	while (1) {
+		do {
+
+			
+			/* Get Status of Clementine */
+			GValueArray *status = g_value_array_new (3);
+			gboolean ret;
+			
+			ret = dbus_g_proxy_call(playersession, "GetStatus", &error,
+				G_TYPE_INVALID,
+				dbus_g_type_get_struct ("GValueArray", G_TYPE_INT, G_TYPE_INT, G_TYPE_INT, G_TYPE_INT, G_TYPE_INVALID), &status,
+				G_TYPE_INVALID);
+			
+			if (!ret) {
+				NORM_ERR(error->message);
+				g_clear_error(&error);
+				
+				strcpy(items[CLEMENTINE_STATUS], "unknown");
+				strcpy(items[CLEMENTINE_TITLE], "unknown");
+				strcpy(items[CLEMENTINE_ARTIST], "unknown");
+				strcpy(items[CLEMENTINE_ALBUM], "unknown");
+				strcpy(items[CLEMENTINE_RANDOM], "0");
+				strcpy(items[CLEMENTINE_REPEAT], "0");
+				strcpy(items[CLEMENTINE_REPEAT_PLAYLIST], "0");
+				strcpy(items[CLEMENTINE_FILENAME], "unknown");
+				strcpy(items[CLEMENTINE_LENGTH], "0");
+				strcpy(items[CLEMENTINE_LENGTH_SECONDS], "0");
+				strcpy(items[CLEMENTINE_LENGTH_MSECONDS], "0");
+				strcpy(items[CLEMENTINE_TRACK_NUMBER], "0");
+				strcpy(items[CLEMENTINE_YEAR], "0");
+				strcpy(items[CLEMENTINE_GENRE], "unknown");
+				strcpy(items[CLEMENTINE_DISC], "0");
+				strcpy(items[CLEMENTINE_COMMENT], "unknown");
+				strcpy(items[CLEMENTINE_BITRATE], "0");
+				strcpy(items[CLEMENTINE_SAMPLERATE], "0");
+				strcpy(items[CLEMENTINE_BPM], "0");
+				strcpy(items[CLEMENTINE_COMPOSER], "unknown");
+				strcpy(items[CLEMENTINE_RATING], "0");
+				strcpy(items[CLEMENTINE_ALBUM_ART], "/usr/share/icons/hicolor/64x64/apps/application-x-clementine.png");
+				strcpy(items[CLEMENTINE_POSITION_SECONDS], "0");
+				strcpy(items[CLEMENTINE_POSITION], "0");
+				strcpy(items[CLEMENTINE_VOLUME], "0");
+				strcpy(items[CLEMENTINE_PLAYLIST_LENGTH], "0");
+				strcpy(items[CLEMENTINE_PLAYLIST_POSITION], "0");
+			}
+			else {
+				//Play
+				switch (g_value_get_int(g_value_array_get_nth(status, 0))) {
+				  case 0:
+				    strcpy(items[CLEMENTINE_STATUS], "Playing");
+				    break;
+				  case 1:
+				    strcpy(items[CLEMENTINE_STATUS], "Paused");
+				    break;
+				  case 2:
+				    strcpy(items[CLEMENTINE_STATUS], "Stopped");
+				    break;
+				  default:
+				    strcpy(items[CLEMENTINE_STATUS], "Something New");
+				    break;
+				}
+				
+				snprintf(items[CLEMENTINE_RANDOM],
+					sizeof(items[CLEMENTINE_RANDOM]) - 1, "%d", g_value_get_int(g_value_array_get_nth(status, 1)));
+				
+				snprintf(items[CLEMENTINE_REPEAT],
+					sizeof(items[CLEMENTINE_REPEAT]) - 1, "%d", g_value_get_int(g_value_array_get_nth(status, 2)));
+				
+				snprintf(items[CLEMENTINE_REPEAT_PLAYLIST],
+					sizeof(items[CLEMENTINE_REPEAT_PLAYLIST]) - 1, "%d", g_value_get_int(g_value_array_get_nth(status, 3)));
+				
+				dbus_g_proxy_call(playersession, "GetMetadata", &error,
+					G_TYPE_INVALID,
+					dbus_g_type_get_map("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), &metadata,
+					G_TYPE_INVALID);
+					
+				if (!g_hash_table_lookup(metadata, "title"))
+					strcpy(items[CLEMENTINE_TITLE], "unknown");
+				else
+					strncpy(items[CLEMENTINE_TITLE], g_value_dup_string(g_hash_table_lookup(metadata, "title")), sizeof(items[CLEMENTINE_TITLE]) - 1);
+				
+				if (!g_hash_table_lookup(metadata, "artist"))
+					strcpy(items[CLEMENTINE_ARTIST], "unknown");
+				else
+					strncpy(items[CLEMENTINE_ARTIST], g_value_dup_string(g_hash_table_lookup(metadata, "artist")), sizeof(items[CLEMENTINE_ARTIST]) - 1);
+				
+				if (!g_hash_table_lookup(metadata, "album"))
+					strcpy(items[CLEMENTINE_ALBUM], "unknown");
+				else 
+					strncpy(items[CLEMENTINE_ALBUM], g_value_dup_string(g_hash_table_lookup(metadata, "album")), sizeof(items[CLEMENTINE_ALBUM]) - 1);
+				      
+				if (!g_hash_table_lookup(metadata, "location"))
+					strcpy(items[CLEMENTINE_FILENAME], "unknown");
+				else
+					strncpy(items[CLEMENTINE_FILENAME], g_value_dup_string(g_hash_table_lookup(metadata, "location")), sizeof(items[CLEMENTINE_FILENAME]) - 1);
+				
+				if (!g_hash_table_lookup(metadata, "time")) {
+					strcpy(items[CLEMENTINE_LENGTH], "0");
+					strcpy(items[CLEMENTINE_LENGTH_SECONDS], "0");
+				}
+				else {
+					snprintf(items[CLEMENTINE_LENGTH], sizeof(items[CLEMENTINE_LENGTH]) - 1, "%d:%.2d", 
+						g_value_get_int(g_hash_table_lookup(metadata, "time")) / 60, 
+						g_value_get_int(g_hash_table_lookup(metadata, "time")) % 60);
+					snprintf(items[CLEMENTINE_LENGTH_SECONDS],
+						sizeof(items[CLEMENTINE_LENGTH_SECONDS]) - 1, "%d", g_value_get_int(g_hash_table_lookup(metadata, "time")));
+				}
+				
+				if (!g_hash_table_lookup(metadata, "mtime"))
+					strcpy(items[CLEMENTINE_LENGTH_MSECONDS], "0");
+				else
+					snprintf(items[CLEMENTINE_LENGTH_MSECONDS],
+						sizeof(items[CLEMENTINE_LENGTH_MSECONDS]) - 1, "%d", g_value_get_int(g_hash_table_lookup(metadata, "mtime")));
+
+				if (!g_hash_table_lookup(metadata, "tracknumber"))
+					strcpy(items[CLEMENTINE_TRACK_NUMBER], "0");
+				else
+					snprintf(items[CLEMENTINE_TRACK_NUMBER],
+						sizeof(items[CLEMENTINE_TRACK_NUMBER]) - 1, "%d", g_value_get_int(g_hash_table_lookup(metadata, "tracknumber")));
+				
+				if (!g_hash_table_lookup(metadata, "year"))
+					strcpy(items[CLEMENTINE_YEAR], "0");
+				else
+					snprintf(items[CLEMENTINE_YEAR],
+						sizeof(items[CLEMENTINE_YEAR]) - 1, "%d", g_value_get_int(g_hash_table_lookup(metadata, "year")));
+
+				if (!g_hash_table_lookup(metadata, "genre"))
+					strcpy(items[CLEMENTINE_GENRE], "unknown");
+				else
+					strncpy(items[CLEMENTINE_GENRE], g_value_dup_string(g_hash_table_lookup(metadata, "genre")), sizeof(items[CLEMENTINE_GENRE]) - 1);
+				
+				if (!g_hash_table_lookup(metadata, "disc"))
+					strcpy(items[CLEMENTINE_DISC], "0");
+				else
+					snprintf(items[CLEMENTINE_DISC],
+						sizeof(items[CLEMENTINE_DISC]) - 1, "%d", g_value_get_int(g_hash_table_lookup(metadata, "disc")));
+				
+				if (!g_hash_table_lookup(metadata, "comment"))
+					strcpy(items[CLEMENTINE_COMMENT], "unknown");
+				else
+					strncpy(items[CLEMENTINE_COMMENT], g_value_dup_string(g_hash_table_lookup(metadata, "comment")), sizeof(items[CLEMENTINE_COMMENT]) - 1);
+				
+				if (!g_hash_table_lookup(metadata, "audio-bitrate"))
+					strcpy(items[CLEMENTINE_BITRATE], "0");
+				else
+					snprintf(items[CLEMENTINE_BITRATE],
+						sizeof(items[CLEMENTINE_BITRATE]) - 1, "%d", g_value_get_int(g_hash_table_lookup(metadata, "audio-bitrate")));
+					
+				if (!g_hash_table_lookup(metadata, "audio-samplerate"))
+					strcpy(items[CLEMENTINE_SAMPLERATE], "0");
+				else
+					snprintf(items[CLEMENTINE_SAMPLERATE],
+						sizeof(items[CLEMENTINE_SAMPLERATE]) - 1, "%d", g_value_get_int(g_hash_table_lookup(metadata, "audio-samplerate")));
+				
+				if (!g_hash_table_lookup(metadata, "bpm"))
+					strcpy(items[CLEMENTINE_BPM], "0");
+				else
+					snprintf(items[CLEMENTINE_BPM],
+						sizeof(items[CLEMENTINE_BPM]) - 1, "%d", g_value_get_int(g_hash_table_lookup(metadata, "bpm")));
+					
+				if (!g_hash_table_lookup(metadata, "composer"))
+					strcpy(items[CLEMENTINE_COMPOSER], "unknown");
+				else
+					strncpy(items[CLEMENTINE_COMPOSER], g_value_dup_string(g_hash_table_lookup(metadata, "composer")), sizeof(items[CLEMENTINE_COMPOSER]) - 1);
+				
+				if (!g_hash_table_lookup(metadata, "rating"))
+					strcpy(items[CLEMENTINE_RATING], "0");
+				else
+					snprintf(items[CLEMENTINE_RATING],
+						sizeof(items[CLEMENTINE_RATING]) - 1, "%d", g_value_get_int(g_hash_table_lookup(metadata, "rating")));
+				
+				if (!g_hash_table_lookup(metadata, "arturl"))
+					strcpy(items[CLEMENTINE_ALBUM_ART], "/usr/share/icons/hicolor/64x64/apps/application-x-clementine.png");
+				else {
+					palbumart = g_value_dup_string(g_hash_table_lookup(metadata, "arturl"));
+					
+					gchar *result = strstr( palbumart, "file://");
+					
+					if (result == NULL)
+						strncpy(items[CLEMENTINE_ALBUM_ART], palbumart, sizeof(items[CLEMENTINE_ALBUM_ART]) - 1);
+					else 
+						strncpy(items[CLEMENTINE_ALBUM_ART], &palbumart[7], sizeof(items[CLEMENTINE_ALBUM_ART]) - 1);
+					
+					g_free(palbumart);
+					palbumart = NULL;
+				}
+				
+				metadata = NULL;
+								
+				dbus_g_proxy_call(playersession, "PositionGet", &error,
+					G_TYPE_INVALID,
+					G_TYPE_INT, &pos,
+					G_TYPE_INVALID);
+				
+				pos = pos / 1000;
+				
+				snprintf(items[CLEMENTINE_POSITION_SECONDS],
+					sizeof(items[CLEMENTINE_POSITION_SECONDS]) - 1, "%d", pos);
+				
+				snprintf(items[CLEMENTINE_POSITION],
+					sizeof(items[CLEMENTINE_POSITION]) - 1, "%d:%.2d", pos / 60,
+					pos % 60);
+				
+				dbus_g_proxy_call(playersession, "VolumeGet", &error,
+					G_TYPE_INVALID,
+					G_TYPE_INT, &vol,
+					G_TYPE_INVALID);
+				
+				snprintf(items[CLEMENTINE_VOLUME],
+					sizeof(items[CLEMENTINE_VOLUME]) - 1, "%d", vol);
+				
+				dbus_g_proxy_call(tracklistsession, "GetLength", &error,
+					G_TYPE_INVALID,
+					G_TYPE_INT, &playlistlength,
+					G_TYPE_INVALID);
+				
+				snprintf(items[CLEMENTINE_PLAYLIST_LENGTH],
+					sizeof(items[CLEMENTINE_PLAYLIST_LENGTH]) - 1, "%d", playlistlength);
+				
+				dbus_g_proxy_call(tracklistsession, "GetCurrentTrack", &error,
+					G_TYPE_INVALID,
+					G_TYPE_INT, &playlistpos,
+					G_TYPE_INVALID);
+				
+				snprintf(items[CLEMENTINE_PLAYLIST_POSITION],
+					sizeof(items[CLEMENTINE_PLAYLIST_POSITION]) - 1, "%d", playlistpos);
+				
+			}
+		} while (0);
+		/* Deliver the refreshed items array to clementine_items. */
+		timed_thread_lock(info.clementine.p_timed_thread);
+		memcpy(&clementine_items, items, sizeof(items));
+		timed_thread_unlock(info.clementine.p_timed_thread);
+
+		if (timed_thread_test(info.clementine.p_timed_thread, 0)) {
+			/* release reference to dbus proxy */
+			g_object_unref(tracklistsession);
+			g_object_unref(playersession);
+			timed_thread_exit(info.clementine.p_timed_thread);
+		}
+	}
+}
diff -rupN conky-1.8.1/src/clementine.h conky-1.8.1.new/src/clementine.h
--- conky-1.8.1/src/clementine.h	1970-01-01 01:00:00.000000000 +0100
+++ conky-1.8.1.new/src/clementine.h	2011-01-31 10:08:45.230000008 +0000
@@ -0,0 +1,93 @@
+/* -*- mode: c; c-basic-offset: 4; tab-width: 4; indent-tabs-mode: t -*-
+ * vim: ts=4 sw=4 noet ai cindent syntax=c
+ *
+ * clementine.h:  conky support for clementine music player
+ *
+ * Copyright (C) 2005-2007 Philip Kovacs pkovacs@users.sourceforge.net
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301
+ * USA.
+ *
+ */
+
+#ifndef CLEMENTINE_H
+#define CLEMENTINE_H
+
+#include "timed_thread.h"
+
+#define CLEMENTINE_DBUS_SERVICE         	"org.mpris.clementine" 
+#define CLEMENTINE_DBUS_INTERFACE       	"org.freedesktop.MediaPlayer"
+#define CLEMENTINE_DBUS_PATH_PLAYER		"/Player"
+#define CLEMENTINE_DBUS_PATH_TRACKLIST		"/TrackList"
+
+
+enum _clementine_items {
+	CLEMENTINE_STATUS = 0,
+	CLEMENTINE_RANDOM,
+	CLEMENTINE_REPEAT,
+	CLEMENTINE_REPEAT_PLAYLIST,
+	CLEMENTINE_TITLE,
+	CLEMENTINE_ARTIST,
+	CLEMENTINE_ALBUM,
+	CLEMENTINE_FILENAME,
+	CLEMENTINE_LENGTH,
+	CLEMENTINE_LENGTH_SECONDS,
+	CLEMENTINE_LENGTH_MSECONDS,
+	CLEMENTINE_TRACK_NUMBER,
+	CLEMENTINE_YEAR,
+	CLEMENTINE_GENRE,
+	CLEMENTINE_DISC,
+	CLEMENTINE_COMMENT,
+	CLEMENTINE_BITRATE,
+	CLEMENTINE_SAMPLERATE,
+	CLEMENTINE_BPM,
+	CLEMENTINE_COMPOSER,
+	CLEMENTINE_RATING,
+	CLEMENTINE_ALBUM_ART,
+	CLEMENTINE_POSITION_SECONDS,
+	CLEMENTINE_POSITION,
+	CLEMENTINE_VOLUME,
+	CLEMENTINE_PLAYLIST_LENGTH,
+	CLEMENTINE_PLAYLIST_POSITION,
+};
+
+/* 12 slots for the clementine values */
+typedef char clementine_t[27][1024];
+
+/* type for data exchange with main thread */
+typedef struct clementine_s {
+  clementine_t items;  /* e.g. items[CLEMENTINE_STATUS] */
+  int max_title_len;  /* e.g. ${clementine_title 50} */
+  int max_artist_len;  /* e.g. ${clementine_artist 50} */
+  int max_album_len;  /* e.g. ${clementine_album 50} */
+  int max_genre_len;  /* e.g. ${clementine_genre 50} */
+  int max_comment_len;  /* e.g. ${clementine_comment 50} */
+  int max_composer_len;  /* e.g. ${clementine_composer 50} */
+  timed_thread *p_timed_thread;
+} CLEMENTINE_S;
+
+/* create a worker thread for clementine media player status */
+int create_clementine_thread(void);
+
+/* destroy clementine media player worker thread */
+int destroy_clementine_thread(void);
+
+/* Service routine for the conky main thread */
+int update_clementine(void);
+
+/* Thread functions */
+void *clementine_thread_func(void *);
+
+#endif
diff -rupN conky-1.8.1/src/conky.c conky-1.8.1.new/src/conky.c
--- conky-1.8.1/src/conky.c	2010-10-05 22:29:36.000000000 +0100
+++ conky-1.8.1.new/src/conky.c	2011-01-31 12:01:47.480000008 +0000
@@ -218,6 +218,9 @@ static void print_version(void)
 #ifdef BMPX
 		   "  * BMPx\n"
 #endif /* BMPX */
+#ifdef CLEMENTINE
+		   "  * Clementine\n"
+#endif /* CLEMENTINE */
 #ifdef MPD
 		   "  * MPD\n"
 #endif /* MPD */
@@ -2180,6 +2183,136 @@ void generate_text_internal(char *p, int
 				snprintf(p, p_max_size, "%i", cur->bmpx.bitrate);
 			}
 #endif /* BMPX */
+
+#ifdef CLEMENTINE
+			OBJ(clementine_status) {
+				snprintf(p, p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_STATUS]);
+			}
+			OBJ(clementine_title) {
+				snprintf(p, cur->clementine.max_title_len > 0
+					? cur->clementine.max_title_len : p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_TITLE]);
+			}
+			OBJ(clementine_artist) {
+				snprintf(p, cur->clementine.max_title_len > 0
+					? cur->clementine.max_title_len : p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_ARTIST]);
+			}
+			OBJ(clementine_album) {
+				snprintf(p, cur->clementine.max_title_len > 0
+					? cur->clementine.max_title_len : p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_ALBUM]);
+			}
+			OBJ(clementine_random) {
+				snprintf(p, p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_RANDOM]);
+			}
+			OBJ(clementine_repeat) {
+				snprintf(p, p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_REPEAT]);
+			}
+			OBJ(clementine_repeat_playlist) {
+				snprintf(p, p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_REPEAT_PLAYLIST]);
+			}
+			OBJ(clementine_filename) {
+				snprintf(p, p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_FILENAME]);
+			}
+			OBJ(clementine_length) {
+				snprintf(p, p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_LENGTH]);
+			}
+			OBJ(clementine_length_seconds) {
+				snprintf(p, p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_LENGTH_SECONDS]);
+			}
+			OBJ(clementine_length_milliseconds) {
+				snprintf(p, p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_LENGTH_MSECONDS]);
+			}
+			OBJ(clementine_trackno) {
+				snprintf(p, p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_TRACK_NUMBER]);
+			}
+			OBJ(clementine_year) {
+				snprintf(p, p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_YEAR]);
+			}
+			OBJ(clementine_genre) {
+				snprintf(p, cur->clementine.max_genre_len > 0
+					? cur->clementine.max_genre_len : p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_GENRE]);
+			}
+			OBJ(clementine_disc) {
+				snprintf(p, p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_DISC]);
+			}
+			OBJ(clementine_comment) {
+				snprintf(p, cur->clementine.max_comment_len > 0
+					? cur->clementine.max_comment_len : p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_COMMENT]);
+			}
+			OBJ(clementine_bitrate) {
+				snprintf(p, p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_BITRATE]);
+			}
+			OBJ(clementine_samplerate) {
+				snprintf(p, p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_SAMPLERATE]);
+			}
+			OBJ(clementine_bpm) {
+				snprintf(p, p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_BPM]);
+			}
+			OBJ(clementine_composer) {
+				snprintf(p, cur->clementine.max_composer_len > 0
+					? cur->clementine.max_composer_len : p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_COMPOSER]);
+			}
+			OBJ(clementine_rating) {
+				snprintf(p, p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_RATING]);
+			}
+			OBJ(clementine_album_art_filename) {
+				snprintf(p, p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_ALBUM_ART]);
+			}
+#if defined(IMLIB2) && defined(X11)
+			OBJ(clementine_album_art) {
+				cimlib_add_image(strcat(strcat(cur->clementine.items[CLEMENTINE_ALBUM_ART], " "), obj->data.s));
+			}
+#endif /* IMLIB2 */
+			OBJ(clementine_position_seconds) {
+				snprintf(p, p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_POSITION_SECONDS]);
+			}
+			OBJ(clementine_position) {
+				snprintf(p, p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_POSITION]);
+			}
+			OBJ(clementine_volume) {
+				snprintf(p, p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_VOLUME]);
+			}
+			OBJ(clementine_playlist_length) {
+				snprintf(p, p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_PLAYLIST_LENGTH]);
+			}
+			OBJ(clementine_playlist_position) {
+				snprintf(p, p_max_size, "%s",
+					cur->clementine.items[CLEMENTINE_PLAYLIST_POSITION]);
+			}
+			OBJ(clementine_bar) {
+				double progress;
+
+				progress =
+					atof(cur->clementine.items[CLEMENTINE_POSITION_SECONDS]) /
+					atof(cur->clementine.items[CLEMENTINE_LENGTH_SECONDS]);
+				new_bar(obj, p, p_max_size, (int) (progress * 255.0f));
+			}
+#endif /* CLEMENTINE */
 			/* we have four different types of top (top, top_mem,
 			 * top_time and top_io). To avoid having almost-same code four
 			 * times, we have this special handler. */
diff -rupN conky-1.8.1/src/conky.h conky-1.8.1.new/src/conky.h
--- conky-1.8.1/src/conky.h	2010-10-05 22:29:36.000000000 +0100
+++ conky-1.8.1.new/src/conky.h	2011-01-30 17:19:45.613333463 +0000
@@ -74,6 +74,10 @@ struct text_object;
 #include "bmpx.h"
 #endif
 
+#ifdef CLEMENTINE
+#include "clementine.h"
+#endif
+
 #ifdef EVE
 #include "eve.h"
 #endif
@@ -250,6 +254,9 @@ struct information {
 #ifdef BMPX
 	struct bmpx_s bmpx;
 #endif
+#ifdef CLEMENTINE
+	CLEMENTINE_S clementine;
+#endif
 	struct usr_info users;
 	struct process *cpu[10];
 	struct process *memu[10];
diff -rupN conky-1.8.1/src/core.c conky-1.8.1.new/src/core.c
--- conky-1.8.1/src/core.c	2010-10-05 22:29:36.000000000 +0100
+++ conky-1.8.1.new/src/core.c	2011-01-31 12:06:01.970000008 +0000
@@ -1011,6 +1011,77 @@ struct text_object *construct_text_objec
 	END OBJ(bmpx_bitrate, &update_bmpx)
 		memset(&(info.bmpx), 0, sizeof(struct bmpx_s));
 #endif
+#ifdef CLEMENTINE
+	END OBJ(clementine_status, &update_clementine);
+	END OBJ_ARG(clementine_title, &update_clementine, "clementine_title needs an argument")
+		sscanf(arg, "%d", &info.clementine.max_title_len);
+		if (info.clementine.max_title_len > 0) {
+			info.clementine.max_title_len++;
+		} else {
+			CRIT_ERR(obj, free_at_crash, "clementine_title: invalid length argument");
+		}
+	END OBJ_ARG(clementine_artist, &update_clementine, "clementine_artist needs an argument")
+		sscanf(arg, "%d", &info.clementine.max_artist_len);
+		if (info.clementine.max_artist_len > 0) {
+			info.clementine.max_artist_len++;
+		} else {
+			CRIT_ERR(obj, free_at_crash, "clementine_artist: invalid length argument");
+		}
+	END OBJ_ARG(clementine_album, &update_clementine, "clementine_album needs an argument")
+		sscanf(arg, "%d", &info.clementine.max_album_len);
+		if (info.clementine.max_album_len > 0) {
+			info.clementine.max_album_len++;
+		} else {
+			CRIT_ERR(obj, free_at_crash, "clementine_album: invalid length argument");
+		}
+	END OBJ(clementine_random, &update_clementine);
+	END OBJ(clementine_repeat, &update_clementine);
+	END OBJ(clementine_repeat_playlist, &update_clementine);
+	END OBJ(clementine_filename, &update_clementine);
+	END OBJ(clementine_length, &update_clementine);
+	END OBJ(clementine_length_seconds, &update_clementine);
+	END OBJ(clementine_length_milliseconds, &update_clementine);
+	END OBJ(clementine_trackno, &update_clementine);
+	END OBJ(clementine_year, &update_clementine);
+	END OBJ_ARG(clementine_genre, &update_clementine, "clementine_genre needs an argument")
+		sscanf(arg, "%d", &info.clementine.max_genre_len);
+		if (info.clementine.max_genre_len > 0) {
+			info.clementine.max_genre_len++;
+		} else {
+			CRIT_ERR(obj, free_at_crash, "clementine_genre: invalid length argument");
+		}
+	END OBJ(clementine_disc, &update_clementine);
+	END OBJ_ARG(clementine_comment, &update_clementine, "clementine_comment needs an argument")
+		sscanf(arg, "%d", &info.clementine.max_comment_len);
+		if (info.clementine.max_comment_len > 0) {
+			info.clementine.max_comment_len++;
+		} else {
+			CRIT_ERR(obj, free_at_crash, "clementine_comment: invalid length argument");
+		}
+	END OBJ(clementine_bitrate, &update_clementine);
+	END OBJ(clementine_samplerate, &update_clementine);
+	END OBJ(clementine_bpm, &update_clementine);
+	END OBJ_ARG(clementine_composer, &update_clementine, "clementine_composer needs an argument")
+		sscanf(arg, "%d", &info.clementine.max_composer_len);
+		if (info.clementine.max_composer_len > 0) {
+			info.clementine.max_composer_len++;
+		} else {
+			CRIT_ERR(obj, free_at_crash, "clementine_composer: invalid length argument");
+		}
+	END OBJ(clementine_rating, &update_clementine);
+	END OBJ(clementine_album_art_filename, &update_clementine);
+#if defined(IMLIB2) && defined(X11)
+	END OBJ(clementine_album_art, 0)
+		obj->data.s = strndup(arg ? arg : "", text_buffer_size);
+#endif /* IMLIB2 */
+	END OBJ(clementine_position_seconds, &update_clementine);
+	END OBJ(clementine_position, &update_clementine);
+	END OBJ(clementine_volume, &update_clementine);
+	END OBJ(clementine_playlist_length, &update_clementine);
+	END OBJ(clementine_playlist_position, &update_clementine);
+	END OBJ(clementine_bar, &update_clementine)
+		scan_bar(obj, arg);
+#endif
 #ifdef EVE
 	END OBJ_ARG(eve, 0, "eve needs arguments: <userid> <apikey> <characterid>")
 		scan_eve(obj, arg);
@@ -1600,6 +1671,11 @@ void free_text_objects(struct text_objec
 			case OBJ_bmpx_bitrate:
 				break;
 #endif
+#ifdef CLEMENTINE
+			case OBJ_clementine_album_art:
+				free(data.s);
+				break;
+#endif
 #ifdef EVE
 			case OBJ_eve:
 				free_eve(obj);
diff -rupN conky-1.8.1/src/Makefile.am conky-1.8.1.new/src/Makefile.am
--- conky-1.8.1/src/Makefile.am	2010-10-05 22:29:36.000000000 +0100
+++ conky-1.8.1.new/src/Makefile.am	2011-01-30 17:27:11.406666796 +0000
@@ -61,6 +61,7 @@ mandatory_sources = colours.c colours.h
 # source files only needed when the apropriate option is enabled
 audacious = audacious.c audacious.h
 bmpx = bmpx.c bmpx.h
+clementine = clementine.c clementine.h
 ibm = ibm.c ibm.h smapi.c smapi.h
 mpd = mpd.c mpd.h libmpdclient.c libmpdclient.h
 moc = moc.c moc.h
@@ -85,7 +86,7 @@ apcupsd = apcupsd.c apcupsd.h
 iconv = iconv_tools.c iconv_tools.h
 
 # make sure the files from above are always included in the distfile
-EXTRA_DIST = $(audacious) $(bmpx) $(ibm) $(mpd) $(moc) $(xmms2) $(linux) \
+EXTRA_DIST = $(audacious) $(bmpx) $(clementine) $(ibm) $(mpd) $(moc) $(xmms2) $(linux) \
              $(solaris) $(freebsd) $(netbsd) $(openbsd) $(port_monitors) \
              $(x11) $(hddtemp) $(eve) $(ccurl_thread) $(rss) $(weather) \
              $(lua) $(nvidia) $(imlib2) $(apcupsd)
@@ -98,6 +99,9 @@ endif
 if BUILD_BMPX
 optional_sources += $(bmpx)
 endif
+if BUILD_CLEMENTINE
+optional_sources += $(clementine)
+endif
 if BUILD_IBM
 optional_sources += $(ibm)
 endif
diff -rupN conky-1.8.1/src/text_object.h conky-1.8.1.new/src/text_object.h
--- conky-1.8.1/src/text_object.h	2010-10-05 22:29:36.000000000 +0100
+++ conky-1.8.1.new/src/text_object.h	2011-01-31 10:58:15.106666674 +0000
@@ -405,6 +405,39 @@ enum text_object_type {
 	OBJ_bmpx_uri,
 	OBJ_bmpx_bitrate,
 #endif /* BMPX */
+#ifdef CLEMENTINE
+	OBJ_clementine_status,
+	OBJ_clementine_title,
+	OBJ_clementine_artist,
+	OBJ_clementine_album,
+	OBJ_clementine_random,
+	OBJ_clementine_repeat,
+	OBJ_clementine_repeat_playlist,
+	OBJ_clementine_filename,
+	OBJ_clementine_length,
+	OBJ_clementine_length_seconds,
+	OBJ_clementine_length_milliseconds,
+	OBJ_clementine_trackno,
+	OBJ_clementine_year,
+	OBJ_clementine_genre,
+	OBJ_clementine_disc,
+	OBJ_clementine_comment,
+	OBJ_clementine_bitrate,
+	OBJ_clementine_samplerate,
+	OBJ_clementine_bpm,
+	OBJ_clementine_composer,
+	OBJ_clementine_rating,
+	OBJ_clementine_album_art_filename,
+	OBJ_clementine_album_art,
+	OBJ_clementine_position_seconds,
+	OBJ_clementine_position,
+	OBJ_clementine_volume,
+	OBJ_clementine_playlist_length,
+	OBJ_clementine_playlist_position,
+#ifdef X11
+	OBJ_clementine_bar,
+#endif /* X11 */
+#endif /* CLEMENTINE */
 #ifdef EVE
 	OBJ_eve,
 #endif /* EVE */
